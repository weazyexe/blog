<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru">
    <title>weazyexe blog</title>
    <subtitle>Профессионально крашу кнопки в Android приложениях с 2019 года</subtitle>
    <link href="https://weazyexe.dev/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://weazyexe.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-07-09T00:00:00+00:00</updated>
    <id>https://weazyexe.dev/atom.xml</id>
    <entry xml:lang="ru">
        <title>initial commit</title>
        <published>2023-07-09T00:00:00+00:00</published>
        <updated>2023-07-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://weazyexe.dev/initial-commit/" type="text/html"/>
        <id>https://weazyexe.dev/initial-commit/</id>
        
        <content type="html">&lt;p&gt;Hello, World!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="ru">
        <title>Адаптируем Android приложение для незрячих людей. Часть 2: Jetpack Compose</title>
        <published>2022-10-21T10:20:00+04:00</published>
        <updated>2022-10-21T10:20:00+04:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://weazyexe.dev/accessibility-compose/" type="text/html"/>
        <id>https://weazyexe.dev/accessibility-compose/</id>
        
        <content type="html">
&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;cover.c4aaee34e40ba173.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Accessibility, или доступность, — важная штука в разработке программного обеспечения, особенно под мобильные платформы. В июле 2022 года я написал &lt;a href=&quot;https:&#x2F;&#x2F;weazyexe.dev&#x2F;accessibility-views&#x2F;&quot;&gt;статью про Accessibility в Android&lt;&#x2F;a&gt;. Тогда я рассказал про имплементацию Accessibility в системе View, но не сказал ни слова про поддержку модного и молодёжного Jetpack Compose.&lt;&#x2F;p&gt;
&lt;p&gt;А поговорить есть о чём: сделать графический интерфейс приложения на Compose доступным для людей с ограниченными возможностями стало гораздо легче, чем на View-интерфейсе.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Рекомендую сначала ознакомиться с &lt;a href=&quot;https:&#x2F;&#x2F;weazyexe.dev&#x2F;accessibility-views&#x2F;&quot;&gt;первой частью&lt;&#x2F;a&gt;. Вы узнаете про Accessibility в Android, службу специальных возможностей TalkBack и познакомитесь с хорошими практиками адаптации приложения для пользователей с ограниченными возможностями. Без понимания этих моментов будет сложнее понять, что происходит в этой статье.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;chek-list-dostupnosti-prilozheniia&quot;&gt;Чек-лист доступности приложения&lt;&#x2F;h2&gt;
&lt;p&gt;Для начала давайте вспомним, что нужно, чтобы приложение стало доступным для людей с ограниченными возможностями.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Приложение просканировано с помощью &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.google.android.apps.accessibility.auditor&quot;&gt;Accessibility Scanner&lt;&#x2F;a&gt; и найдены проблемные места.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Шрифты — только в &lt;em&gt;sp&lt;&#x2F;em&gt;-юнитах.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Сложные компоненты с текстом имеют нефиксированный размер: пользователь может увеличить размер шрифта по системе.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Заголовки помечены с помощью &lt;code&gt;accessibilityHeading = true&lt;&#x2F;code&gt;, чтобы пользователь мог перемещаться по ним через TalkBack.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Соблюдены цветовые контрасты: нет мешанины цветов, контент не сливается с фоном.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Не используется КАПС: на некоторых девайсах TalkBack может зачитать такой текст как аббревиатуру. Это некорректно.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Минимальный размер кликабельных элементов — 48x48dp.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contentDescription&lt;&#x2F;code&gt; указан там, где нужно. Если нужно, чтобы TalkBack игнорировал элемент, задан параметр &lt;code&gt;importantForAccessibility = no&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Использован Live Regions, если необходимо зачитывать динамически обновляемую на UI информацию.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Проверен порядок навигации между компонентами.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Проверено, насколько удобно пользоваться сложными кастомными компонентами.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;semanticheskoe-derevo&quot;&gt;Семантическое дерево&lt;&#x2F;h2&gt;
&lt;p&gt;Графический интерфейс на Jetpack Compose рисуется с помощью &lt;code&gt;@Composable&lt;&#x2F;code&gt;-функций. Их совокупность называется &lt;strong&gt;деревом композиции&lt;&#x2F;strong&gt;: грубо говоря, это интерфейс, который мы видим на экране смартфона. &lt;&#x2F;p&gt;
&lt;p&gt;Чтобы понимать, как работает Accessibility в Compose, следует разобраться с термином &lt;strong&gt;семантическое дерево&lt;&#x2F;strong&gt;. Оно описывает графический интерфейс альтернативным способом: содержит информацию о семантике, то есть &lt;em&gt;что это за компонент и что с ним можно сделать&lt;&#x2F;em&gt;. Для Accessibility Services и &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;jetpack&#x2F;compose&#x2F;testing&quot;&gt;Testing Framework&lt;&#x2F;a&gt; это более понятно.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Accessibility Services — утилиты, которые упрощают работу со смартфоном для людей с ограниченными возможностями. К ним относятся TalkBack, Switch Access, Voice Access и так далее. Важно не путать их с AccessibilityService — одноимённым сервисом в Android. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;В документации есть хорошая схема семантического дерева. &lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;semantic_tree.71a7a7ca2de8b1ea.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Схема семантического дерева&lt;&#x2F;p&gt;
&lt;p&gt;Сверху — видимый UI: обычный список элементов с Floating Action Button и Navigation Bar. Снизу — семантическое дерево, где каждый лепесток графа — это компонент и его семантика. TalkBack будет проходить по всем нодам дерева и зачитывать семантическую информацию.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-sdelat-ui-na-compose-dostupnym&quot;&gt;Как сделать UI на Compose доступным&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;klikabel-nye-elementy&quot;&gt;Кликабельные элементы&lt;&#x2F;h3&gt;
&lt;p&gt;Пользователю с ограниченными возможностями &lt;strong&gt;нужно&lt;&#x2F;strong&gt; знать, можно сделать что-то с элементом или нет. Чтобы компонент в Compose стал кликабельным, не нужно никаких сложных конструкций: достаточно установить модификатор &lt;code&gt;Modifier.clickable&lt;&#x2F;code&gt; и передать туда лямбду. Это будет выглядеть примерно так.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Box(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.clickable(onClickLabel = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Do something&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Do something
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Text(text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если вдруг доступа к модификатору &lt;code&gt;clickable&lt;&#x2F;code&gt; нет, можно назначить слушателя на событие нажатия через &lt;code&gt;Modifier.semantics&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Box(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.semantics {
&lt;&#x2F;span&gt;&lt;span&gt;        onClick(label = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Do something&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Do something
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    Text(text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;modifikator-semantics&quot;&gt;Модификатор semantics&lt;&#x2F;h3&gt;
&lt;p&gt;В &lt;code&gt;Modifier.semantics&lt;&#x2F;code&gt; обычно указывают семантическую информацию о компоненте: что за компонент, что с ним можно сделать и какое у него состояние. &lt;code&gt;Modifier.clearAndSetSemantics&lt;&#x2F;code&gt; создан, чтобы очистить семантику у дочерних &lt;code&gt;@Composable&lt;&#x2F;code&gt;-компонентов и перегрузить её.&lt;&#x2F;p&gt;
&lt;p&gt;В обеих функциях передаётся объект &lt;code&gt;SemanticsPropertyReceiver&lt;&#x2F;code&gt;, который мы можем редактировать, &lt;strong&gt;но не можем считывать оттуда данные&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;onclicklabel&quot;&gt;onClickLabel&lt;&#x2F;h3&gt;
&lt;p&gt;TalkBack при наведении на кнопку зачитает &lt;em&gt;«Button, Double tap to &lt;strong&gt;activate&lt;&#x2F;strong&gt;»&lt;&#x2F;em&gt;. Если нужно дать больше семантики компоненту, можно заменить слово &lt;em&gt;«activate»&lt;&#x2F;em&gt; на любое другое.&lt;&#x2F;p&gt;
&lt;p&gt;В качестве примера возьмём карточку с данными о криптокошельке. Его мы разбирали в &lt;a href=&quot;https:&#x2F;&#x2F;weazyexe.dev&#x2F;accessibility-views&#x2F;&quot;&gt;прошлой статье&lt;&#x2F;a&gt;. При наведении на карточку слово &lt;em&gt;«activate»&lt;&#x2F;em&gt; не даст никакого контекста. Если заменить формулировку на более осмысленную, получится достаточно user-friendly: &lt;em&gt;«Card, ETH wallet, Double tap to &lt;strong&gt;view wallet details&lt;&#x2F;strong&gt;»&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;wallet_card.4c73838f6d1e4467.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;informatsiia-o-komponente&quot;&gt;Информация о компоненте&lt;&#x2F;h3&gt;
&lt;p&gt;У View в Android есть три основных семантических параметра:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contentDescription&lt;&#x2F;code&gt; — описание контента, находящегося в компоненте.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stateDescription&lt;&#x2F;code&gt; — описание состояния элемента: enabled&#x2F;disabled, checked&#x2F;unchecked и так далее.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;roleDescription&lt;&#x2F;code&gt; — роль компонента на UI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;content_description_bart.91f356f8fd1a2d6d.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Android развивается, способы построения UI тоже, а &lt;code&gt;contentDescription&lt;&#x2F;code&gt; остается: его указывают для изображений или сложных компонентов. &lt;&#x2F;p&gt;
&lt;p&gt;У функции &lt;code&gt;Image&lt;&#x2F;code&gt; параметр &lt;code&gt;contentDescription&lt;&#x2F;code&gt; является обязательным. Можно положить туда &lt;code&gt;null&lt;&#x2F;code&gt;, и это будет аналогом &lt;code&gt;android:importantForAccessibility=”no”&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Image(
&lt;&#x2F;span&gt;&lt;span&gt;    imageVector = ImageVector.vectorResource(R.drawable.ic_image),
&lt;&#x2F;span&gt;&lt;span&gt;    contentDescription = stringResource(R.string.image_content_description)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если нужно задать описание не изображению, используем всё тот же &lt;code&gt;Modifier.semantics&lt;&#x2F;code&gt; и обновляем данные в поле &lt;code&gt;SemanticsProperties.contentDescription&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;desc = stringResource(R.string.component_content_description)
&lt;&#x2F;span&gt;&lt;span&gt;Box(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.semantics {
&lt;&#x2F;span&gt;&lt;span&gt;        contentDescription = desc
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Some content
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zagolovki&quot;&gt;Заголовки&lt;&#x2F;h3&gt;
&lt;p&gt;Заголовки нужны для того, чтобы у пользователя была возможность удобной навигации по экрану с большим количеством информации. TalkBack имеет &lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;accessibility&#x2F;android&#x2F;answer&#x2F;6006598?hl=en&quot;&gt;несколько режимов навигации&lt;&#x2F;a&gt; по компонентам, но мы затронем только навигацию по заголовкам. Чтобы сделать компонент заголовком, нужно назначить ему через модификатор &lt;code&gt;Modifier.semantics&lt;&#x2F;code&gt; семантику заголовка:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Text(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.semantics {
&lt;&#x2F;span&gt;&lt;span&gt;        heading()
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Heading 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;spiski&quot;&gt;Списки&lt;&#x2F;h3&gt;
&lt;p&gt;Поддержка Accessibility в системе View хороша тем, что для списка на &lt;code&gt;RecyclerView&lt;&#x2F;code&gt; не нужно задавать никакую семантику: всё работает из коробки. Наводимся на элемент списка, и TalkBack зачитывает, что это за элемент списка, какой он по счёту и какого размера список.&lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;recycler_view_meme.1a9057dfc84d1db9.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В Compose такой функциональности из коробки нет: придётся делать самим. Для этого есть два семантических свойства: &lt;code&gt;collectionInfo&lt;&#x2F;code&gt; и &lt;code&gt;collectionItemInfo&lt;&#x2F;code&gt;. Свойство &lt;code&gt;collectionInfo&lt;&#x2F;code&gt; содержит информацию о размере списка или таблицы: количество строк и столбцов. Для обычного списка количество столбцов по умолчанию равно 1. Установить &lt;code&gt;collectionInfo&lt;&#x2F;code&gt; нужно в модификатор &lt;code&gt;semantics&lt;&#x2F;code&gt; компонента списка.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Column(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.semantics {
&lt;&#x2F;span&gt;&lt;span&gt;        collectionInfo = CollectionInfo(versions.size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    . . .
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Свойство &lt;code&gt;collectionItemInfo&lt;&#x2F;code&gt; указывается на каждый элемент списка. Параметры &lt;code&gt;rowIndex&lt;&#x2F;code&gt; и &lt;code&gt;columnIndex&lt;&#x2F;code&gt; отвечают за позицию элемента в списке. Параметры &lt;code&gt;rowSpan&lt;&#x2F;code&gt; и &lt;code&gt;columnSpan&lt;&#x2F;code&gt; больше используются в таблицах и отвечают за количество элементов, охваченных ячейкой таблицы. Для простого списка эти параметры использовать не будем: установим значение 1.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;versions.forEachIndexed { index, version -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Text(
&lt;&#x2F;span&gt;&lt;span&gt;        modifier = Modifier
&lt;&#x2F;span&gt;&lt;span&gt;            .fillMaxWidth()
&lt;&#x2F;span&gt;&lt;span&gt;            .padding(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16.&lt;&#x2F;span&gt;&lt;span&gt;dp)
&lt;&#x2F;span&gt;&lt;span&gt;            .semantics {
&lt;&#x2F;span&gt;&lt;span&gt;                collectionItemInfo = CollectionItemInfo(
&lt;&#x2F;span&gt;&lt;span&gt;                    owIndex = index,
&lt;&#x2F;span&gt;&lt;span&gt;                    rowSpan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    columnIndex = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    columnSpan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        text = version
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;С версии Compose 1.2.0 и выше это работает и для имплементаций &lt;code&gt;LazyList&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;LazyColumn(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier.semantics {
&lt;&#x2F;span&gt;&lt;span&gt;        collectionInfo = CollectionInfo(versions.size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    itemsIndexed(
&lt;&#x2F;span&gt;&lt;span&gt;        items = versions,
&lt;&#x2F;span&gt;&lt;span&gt;        key = { _, version -&amp;gt; version.hashCode() }
&lt;&#x2F;span&gt;&lt;span&gt;    ) { index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, version: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Text(
&lt;&#x2F;span&gt;&lt;span&gt;            modifier = Modifier
&lt;&#x2F;span&gt;&lt;span&gt;                .semantics {
&lt;&#x2F;span&gt;&lt;span&gt;                    collectionItemInfo = CollectionItemInfo(
&lt;&#x2F;span&gt;&lt;span&gt;                        rowIndex = index,
&lt;&#x2F;span&gt;&lt;span&gt;                        rowSpan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        columnIndex = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        columnSpan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                    )
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                .fillMaxWidth()
&lt;&#x2F;span&gt;&lt;span&gt;                .padding(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16.&lt;&#x2F;span&gt;&lt;span&gt;dp),
&lt;&#x2F;span&gt;&lt;span&gt;            text = version
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kastomnye-deistviia&quot;&gt;Кастомные действия&lt;&#x2F;h3&gt;
&lt;p&gt;Кастомные действия нужны для сложновыполнимых действий на UI: например, свайпов. Если у пользователя включен TalkBack, свайпнуть можно, но это достаточно неудобно. Кроме того, TalkBack бывает включён наряду вместе со Switch Access: там свайп вообще невозможен, поскольку пользователь не прикасается к экрану. &lt;&#x2F;p&gt;
&lt;p&gt;Давайте для примера разберём, как реализовать функциональность swipe-to-dismiss для людей с ограниченными возможностями. Сверстаем обычный элемент списка из приложения почтового клиента.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Column(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier
&lt;&#x2F;span&gt;&lt;span&gt;        .fillMaxWidth()
&lt;&#x2F;span&gt;&lt;span&gt;        .padding(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16.&lt;&#x2F;span&gt;&lt;span&gt;dp)
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    Text(
&lt;&#x2F;span&gt;&lt;span&gt;        modifier = Modifier.padding(bottom = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4.&lt;&#x2F;span&gt;&lt;span&gt;dp),
&lt;&#x2F;span&gt;&lt;span&gt;        text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Habr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        fontWeight = FontWeight.Bold
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    Text(text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Самое интересное по вашим хабам&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;swipeable.2117f9de7745d486.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Простой элемент списка с заголовком и описанием&lt;&#x2F;p&gt;
&lt;p&gt;Поскольку UI верстаем через Compose, с реализацией swipe-to-dismiss не надо сильно париться: будем использовать стандартную из библиотеки. Оборачиваем вью в функцию &lt;code&gt;SwipeToDismiss&lt;&#x2F;code&gt;: теперь можем свайпать компонент 🎉&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;state = rememberDismissState()
&lt;&#x2F;span&gt;&lt;span&gt;SwipeToDismiss(
&lt;&#x2F;span&gt;&lt;span&gt;    state = state,
&lt;&#x2F;span&gt;&lt;span&gt;    background = {}
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Здесь — Column с контентом
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;500&quot;&gt;
        &lt;source src=assets&amp;#x2F;swipeable_behavior.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И всё бы хорошо: пользователь рад, что может свайпать, разработчик рад, что может сделать такую функциональность за пару строк. Но мы собрались здесь ради Accessibility, а эта реализация максимальна неудобна для пользователей с ограниченными возможностями: тексты не читаются как единый компонент, они независимы друг от друга.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;500&quot;&gt;
        &lt;source src=assets&amp;#x2F;swipeable_wrong_talkback.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Эту проблему можно решить, установив значение &lt;code&gt;true&lt;&#x2F;code&gt; в модификаторе &lt;code&gt;semantics&lt;&#x2F;code&gt;, аргумент &lt;code&gt;mergeDescendants&lt;&#x2F;code&gt;. Это означает, что мы замёржили все дочерние элементы этого компонента и их невозможно выделить через TalkBack. Теперь выделяться будет весь элемент списка. То же самое можно было сделать на &lt;code&gt;View&lt;&#x2F;code&gt;, пометив все дочерние &lt;code&gt;View&lt;&#x2F;code&gt; параметром &lt;code&gt;importantForAccessibility = no&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;swipeable_right_talkback.d8da46c8d000fdb6.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Единый компонент: TalkBack зачитывает всю информацию из него&lt;&#x2F;p&gt;
&lt;p&gt;Теперь кастомизируем swipe-to-dismiss для людей с ограниченными возможностями, чтобы можно было открывать меню с дополнительными действиями и выбирать нужный элемент в списке через TalkBack.&lt;&#x2F;p&gt;
&lt;p&gt;Проинициализируем &lt;code&gt;CoroutineScope&lt;&#x2F;code&gt; и достанем из ресурсов локализованную строку. Напоминаю, что &lt;strong&gt;все строковые ресурсы из приложения&lt;&#x2F;strong&gt;, используемые для Accessibility, &lt;strong&gt;обязаны быть локализованными&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;scope = rememberCoroutineScope()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;deleteString = stringResource(R.string.delete)
&lt;&#x2F;span&gt;&lt;span&gt;SwipeToDismiss(
&lt;&#x2F;span&gt;&lt;span&gt;    . . .
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Добавим в &lt;code&gt;semantics&lt;&#x2F;code&gt; нужную логику: при вызове кастомного действия явно свайпнуть эту ячейку. И вот что получается.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;Column(
&lt;&#x2F;span&gt;&lt;span&gt;    modifier = Modifier
&lt;&#x2F;span&gt;&lt;span&gt;        .semantics(mergeDescendants = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            customActions = listOf(
&lt;&#x2F;span&gt;&lt;span&gt;                CustomAccessibilityAction(deleteString) {
&lt;&#x2F;span&gt;&lt;span&gt;                    scope.launch {
&lt;&#x2F;span&gt;&lt;span&gt;                        state.dismiss(DismissDirection.StartToEnd)
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .fillMaxWidth()
&lt;&#x2F;span&gt;&lt;span&gt;        .padding(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16.&lt;&#x2F;span&gt;&lt;span&gt;dp)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;swipeable_custom_actions.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;osobennosti-accessibility-v-compose&quot;&gt;Особенности Accessibility в Compose&lt;&#x2F;h2&gt;
&lt;p&gt;В отличие от системы View, поддержка Accessibility в Compose немного урезана:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;В роль теперь нельзя задать любую строку — только одну из заранее предопределённых: Button, Checkbox, RadioButton, Tab, Image и Switch.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Нельзя отслеживать Accessibility-события у компонентов. Например, теперь не получится через &lt;code&gt;AccessibilityDelegate&lt;&#x2F;code&gt; и перегруженную функцию &lt;code&gt;performAccessibilityAction&lt;&#x2F;code&gt; перехватывать события. Сам по себе &lt;code&gt;AccessibilityDelegate&lt;&#x2F;code&gt; никуда не пропал: об этом — ниже.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;В Compose нет аналога &lt;code&gt;ViewCompat.announceForAccessibility&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Это основные особенности, которые мне удалось обнаружить. Скорее всего, есть ещё что-то, чем обделили Compose. Эти изменения были сделаны не просто так: неправильное использование функциональности могло ввести пользователей в заблуждение, а разработчики могли понавставлять себе палки в колёса. &lt;&#x2F;p&gt;
&lt;p&gt;Основная рекомендация: доработки по Accessibility должны быть минимальны, не нужно строить никаких велосипедов. Оставшиеся инструменты должны покрывать весь скоуп возможных проблем.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kuda-vsio-taki-propal-accessibilitydelegate&quot;&gt;Куда всё-таки пропал AccessibilityDelegate&lt;&#x2F;h2&gt;
&lt;p&gt;А он никуда и не пропадал! Весь Compose рисуется на &lt;code&gt;ComposeView&lt;&#x2F;code&gt;. Compose поддерживает Accessibility, значит, у &lt;code&gt;ComposeView&lt;&#x2F;code&gt; есть свой собственный делегат. И имя ему &lt;code&gt;AndroidComposeViewAccessibilityDelegateCompat.android.kt&lt;&#x2F;code&gt;. Название страшное, логика внутри тоже. Смысл делегата — адаптировать все указанные семантики в Compose для ОС Android.&lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;java_class_meme.223551ffb6412a95.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;chto-v-itoge&quot;&gt;Что в итоге&lt;&#x2F;h2&gt;
&lt;p&gt;При разработке Jetpack Compose Гугл проделал огромную работу. Теперь намного легче сделать приложение доступным: не надо использовать страшные сущности типа &lt;code&gt;AccessibilityDelegateCompat&lt;&#x2F;code&gt; и перегружать в этом делегате странные методы. Подход стал проще: &lt;strong&gt;пишешь код&lt;&#x2F;strong&gt; как пишешь, и &lt;strong&gt;оно работает&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Текст изначально публиковался на &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;companies&#x2F;surfstudio&#x2F;articles&#x2F;694622&#x2F;&quot;&gt;habr.ru&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="ru">
        <title>Адаптируем Android приложение для незрячих людей. Часть 1: основы</title>
        <published>2022-07-22T16:09:00+04:00</published>
        <updated>2022-07-22T16:09:00+04:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://weazyexe.dev/accessibility-views/" type="text/html"/>
        <id>https://weazyexe.dev/accessibility-views/</id>
        
        <content type="html">
&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;cover.4358a0383620137b.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В один из зимних вечеров я сидел дома, читал замечательную книжку «Android-программирование для профессионалов» и наткнулся на главу про Accessibility. Раньше я об этой теме не задумывался: клал &lt;code&gt;null&lt;&#x2F;code&gt; в поле &lt;code&gt;contentDescription&lt;&#x2F;code&gt; и жил себе спокойно. Но когда получил поверхностные знания, как слабовидящие люди пользуются смартфоном через утилиту TalkBack, у меня появилось желание погрузиться в тему доступности глубже.&lt;&#x2F;p&gt;
&lt;p&gt;Материала по Accessibility в Android вышло на целых 2 текста. В первом тексте я расскажу и покажу, как работает Accessibility в Android. Посмотрим, легко ли адаптировать приложения для людей с ограниченными возможностями — или это слишком трудоёмкая задача, к которой даже не стоит подступаться. Во &lt;a href=&quot;https:&#x2F;&#x2F;weazyexe.dev&#x2F;accessibility-views&#x2F;&quot;&gt;второй части&lt;&#x2F;a&gt; разберём как дела с Accessibility в Jetpack Compose.&lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;contentdescription_meme.451bc03ceeae6f49.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Погружаться в тему Accessibility я начал с гуглежа статистики. &lt;a href=&quot;https:&#x2F;&#x2F;www.who.int&#x2F;news-room&#x2F;fact-sheets&#x2F;detail&#x2F;disability-and-health&quot;&gt;По данным ВОЗ&lt;&#x2F;a&gt;, в мире более миллиарда человек обладает с той или иной формой инвалидности. «Немало», — подумал я и сразу задался другим вопросом: а почему, если в мире так много людей с инвалидностью, огромное количество популярных и не очень приложений не поддерживают приложения для слабовидящих, глухих, людей с заболеваниями опорно-двигательного аппарата? Решил, что надо исправлять это недоразумение и двигать Accessibility в массы. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;dlia-nachala-razberemsia-chto-voobshche-takoe-accessibility&quot;&gt;Для начала разберемся, что вообще такое Accessibility&lt;&#x2F;h2&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;accessibility_who.d92f2f1d0a7ecfe3.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Accessibility в переводе с английского — «доступность». В контексте программного обеспечения — разработка ПО таким образом, чтобы им могли пользоваться люди с ограниченными возможностями. У термина есть общепринятое сокращение — &lt;em&gt;a11y&lt;&#x2F;em&gt;: между &lt;em&gt;a&lt;&#x2F;em&gt; и &lt;em&gt;y&lt;&#x2F;em&gt; в слове &lt;em&gt;accessibility&lt;&#x2F;em&gt; 11 букв.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы разобраться, как работает Accessibility, предлагаю задаться вопросом: а как в целом люди пользуются смартфоном? Пользователь взаимодействует с устройством, передавая ему действия: нажатия, свайпы, потряхивания. Смартфон возвращает результат действия, отображая его на экране. &lt;&#x2F;p&gt;
&lt;p&gt;Мы взаимодействуем со смартфоном как привыкли: нажимаем на экран и получаем результат действия. Люди с ограниченными возможностями пользуются смартфоном точно так же, просто они передают и получают информацию со смартфона другими путями: отправляют голосовые команды, команды с другого устройства ввода. Способов много — подход общий.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;phone_usage_graph.bbbb0a40cba18cd5.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Получаем данные, отправляем действия, чтобы получить новые данные&lt;&#x2F;p&gt;
&lt;p&gt;В Android существуют встроенные Accessibility Services: TalkBack, Switch Access, Voice Access и прочие. О них можно думать как о плагинах для Android, которые помогают людям с ограниченными возможностями пользоваться смартфоном.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Под термином «Accessibility Services» будут подразумеваться перечисленные сервисы, а не Android-сервисы для работы в бэкграунде. Пишу об этом, потому что в Android есть одноименный сервис — AccessibilityService, который работает в бэкграунде с отправляемыми ему AccessibilityEvent.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;kakie-accessibility-services-sushchestvuiut&quot;&gt;Какие Accessibility Services существуют&lt;&#x2F;h2&gt;
&lt;p&gt;С каждой новой версией Android выкатывает всё больше новых сервисов для пользователей с ограниченными возможностями. Сейчас в Android есть:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TalkBack — зачитывает информацию о UI-компонентах;&lt;&#x2F;li&gt;
&lt;li&gt;Switch Access — управление устройством через специальный контроллер;&lt;&#x2F;li&gt;
&lt;li&gt;Voice Access — голосовое управление смартфоном;&lt;&#x2F;li&gt;
&lt;li&gt;Select to Speak — зачитывает текстовый контент в выделенной области;&lt;&#x2F;li&gt;
&lt;li&gt;Extra Dim — настройки яркости дисплея;&lt;&#x2F;li&gt;
&lt;li&gt;Magnification — экранная лупа;&lt;&#x2F;li&gt;
&lt;li&gt;Live Captions — экранные субтитры;&lt;&#x2F;li&gt;
&lt;li&gt;Live Transcribe — перевод речи в текст;&lt;&#x2F;li&gt;
&lt;li&gt;Sound Amplifier — управление звуком;&lt;&#x2F;li&gt;
&lt;li&gt;Lookout — распознавание объектов через камеру;&lt;&#x2F;li&gt;
&lt;li&gt;Action Blocks — создание сценариев использования.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;И это ещё, возможно, не всё! &lt;&#x2F;p&gt;
&lt;p&gt;Остановимся подробнее на первых трёх сервисах: TalkBack, Switch Access, Voice Access. Их используют чаще всего: именно с ними придётся сталкиваться разработчику в повседневной работе. Остальные — вспомогательные. Более подробно про них можно посмотреть в &lt;a href=&quot;https:&#x2F;&#x2F;www.android.com&#x2F;accessibility&#x2F;&quot;&gt;официальной документации&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;talkback&quot;&gt;TalkBack&lt;&#x2F;h3&gt;
&lt;p&gt;TalkBack — утилита, которая зачитывает информацию с экрана. Помогает слабовидящим людям пользоваться смартфоном. &lt;&#x2F;p&gt;
&lt;p&gt;TalkBack меняет логику управления смартфоном: пользователь выделяет нужный компонент, и система зачитывает содержимое. Компоненты экрана можно выделять либо тапом, свайпами влево и вправо или зажать палец на экране и двигать его — тогда TalkBack будет зачитывать каждый элемент, на который наведён жест. Свайп вправо — выделится следующий элемент на экране, свайп влево — предыдущий. &lt;&#x2F;p&gt;
&lt;p&gt;Все привычные обычному пользователю жесты — назад, свернуть, меню многозадачности — работают, но их нужно воспроизводить двумя пальцами. Все действия и жесты TalkBack описаны в &lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;accessibility&#x2F;android&#x2F;answer&#x2F;6151827&quot;&gt;документации&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;На каждом смартфоне с Android на борту можно включить TalkBack и пройти туториал по использованию: всё это делается в настройках, пункт Accessibility. &lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;talkback.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;В настройках TalkBack есть меню с настройками для разработчиков. Можно включить субтитры или добавить шорткат быстрого включения и выключения TalkBack — зажать кнопки громкости на несколько секунд. Очень помогает во время разработки.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;switch-access&quot;&gt;Switch Access&lt;&#x2F;h3&gt;
&lt;p&gt;Switch Access — сервис для управления смартфоном с помощью специального устройства, переключателя. &lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;switch.6dd3ab893de981de.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Так может выглядеть переключатель&lt;&#x2F;p&gt;
&lt;p&gt;Принцип взаимодействия со смартфоном схож с принципом работы через TalkBack. На экране выделен компонент, между компонентами можно переключаться. Обычно на переключателе есть несколько кнопок. В качестве переключателя можно использовать специальное устройство или настроить  стороннюю клавиатуру, а также кнопки громкости на смартфоне для удобного дебаггинга.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;voice-access&quot;&gt;Voice Access&lt;&#x2F;h3&gt;
&lt;p&gt;Voice Access — сервис для голосового управления смартфоном. Пользователь говорит, какое действие нужно сделать на экране: нажать кнопку «Лайк», пролистать вниз, ввести текст в поле «Сообщение». Действие выполняется. На видео — Voice Access в действии.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;voiceaccess.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На самом деле Voice Access далеко не идеальная вещь: иногда тупит и некорректно распознаёт слова — особенно названия приложений.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chto-proiskhodit-so-storony-razrabotchikov&quot;&gt;Что происходит со стороны разработчиков&lt;&#x2F;h2&gt;
&lt;p&gt;Давайте посмотрим, какие инструменты есть для разработчиков, чтобы UX приложений не страдал. Хорошие новости: все компоненты из стандартной библиотеки Android по умолчанию поддерживают Accessibility. Не придётся с нуля разбираться и делать доступными базовые компоненты: TextView, EditText, Switch и другие.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prilozhenie-accessibility-scanner-dlia-pomoshchi-razrabotchikam&quot;&gt;Приложение Accessibility Scanner для помощи разработчикам&lt;&#x2F;h3&gt;
&lt;p&gt;Google выпустил для разработчиков приложение &lt;em&gt;Accessibility Scanner&lt;&#x2F;em&gt;: оно помогает найти некомфортные для людей с ограниченными возможностями места в приложении. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Accessibility Scanner&lt;&#x2F;em&gt; работает просто:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Открываем, даём все разрешения, оно отображается над всеми приложениями как плавающая кнопка.&lt;&#x2F;li&gt;
&lt;li&gt;Заходим в приложение, которое нужно проверить, переходим на нужный экран, нажимаем на кнопку Snapshot.&lt;&#x2F;li&gt;
&lt;li&gt;Ждём, пока Accessibility Scanner проанализирует экран, и смотрим на результат.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;scanner_results.1ecc8431f3daa49c.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Результаты работы Accessibility Scanner на экране приложения Twitter. Оранжевым подсвечиваются проблемные места. Есть подсказки, как исправить ошибки, с пояснениями, почему нужно сделать так&lt;&#x2F;p&gt;
&lt;p&gt;Accessibility Scanner — отличная штука, но у него есть существенный недостаток. Сканер находит только очевидные проблемы: размер текста, размер кликабельной области компонента, отсутствие лейбла у изображения и так далее. В более сложных случаях он бесполезен. Например, не поможет с распознаванием кастомных вью и правильной интерпретацией для слабовидящих: что зачитывать с этого компонента, какие действия с ним можно совершить.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте разберемся, как сделать приложение более доступным с помощью нескольких простых шагов: они закроют процентов 90 всевозможных кейсов.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shrifty&quot;&gt;Шрифты&lt;&#x2F;h3&gt;
&lt;p&gt;Правило простое: всегда указывайте размер шрифтов в sp! Вы меня спросите: «Зачем для шрифтов придумали какую-то отдельную единицу? Если я укажу размер в dp, никто не умрёт». &lt;&#x2F;p&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;well_yes.6f28c936b66cbfc1.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Если бы всё было так просто, мои вы хорошие&lt;&#x2F;p&gt;
&lt;p&gt;Если пользователь увеличит шрифты в системе, нужно, чтобы они увеличились и в приложении. Для этого и пригодится sp-юнит: если указать размер текста 16sp, а пользователь в системе поставил коэффициент увеличения текста = 1,25, то размер шрифта станет 20dp. На иллюстрациях видно, как изменяется размер шрифта, указанный в sp.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;fonts.a33b1ad257885479.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;zagolovki&quot;&gt;Заголовки&lt;&#x2F;h3&gt;
&lt;p&gt;TalkBack предоставляет удобную навигацию между заголовками. Если на экране много текста с заголовками или, например, на экране есть список с подсписками, которые также помечены заголовками, в эти TextView дополнительно следует положить &lt;code&gt;true&lt;&#x2F;code&gt; в поле &lt;code&gt;accessibilityHeading&lt;&#x2F;code&gt;. Тогда текст будет считываться как заголовок. &lt;&#x2F;p&gt;
&lt;p&gt;Этот параметр появился в Android 9. Если нужно использовать его на более старых версиях, эту проблему решает compat-версия этого параметра — &lt;code&gt;ViewCompat.setAccessibilityHeading(view, boolean)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kontrast&quot;&gt;Контраст&lt;&#x2F;h3&gt;
&lt;p&gt;Люди с нарушениями зрения могут воспринимать цвета по-другому: стоит следить, все ли элементы на экране чётко различимы между собой, есть ли цветовой контраст. &lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;accessibility&#x2F;android&#x2F;answer&#x2F;7158390?hl=en&quot;&gt;По гайдлайнам Android&lt;&#x2F;a&gt;, хорошая практика — устанавливать цветовой контраст на наложенных друг на друга компонентах с соотношением более чем 3:1 для больших текстов и 4,5:1 для остального контента.&lt;&#x2F;p&gt;
&lt;p&gt;Что это за цифры? Это соотношение между цветами, которое показывает, насколько сильно контрастируют два цвета между собой. Чтобы было понятно, разберем на примере: соотношение белого цвета (#FFFFFF) к чёрному (#000000) равняется 21:1 — это максимальное возможное соотношение. Два одинаковых цвета имеют отношение 1:1. Проверить контраст между цветами можно на &lt;a href=&quot;https:&#x2F;&#x2F;webaim.org&#x2F;resources&#x2F;contrastchecker&#x2F;&quot;&gt;сайте WebAIM&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;contrast.3372006d4c839285.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Пример плохого и хорошего контрастов&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kaps-ne-nash-bro&quot;&gt;КАПС – НЕ НАШ БРО&lt;&#x2F;h3&gt;
&lt;p&gt;На некоторых девайсах TalkBack читает текст, написанный заглавными буквами, как аббревиатуру – по букве. Сами понимаете, воспринимать это на слух очень трудно.&lt;&#x2F;p&gt;
&lt;p&gt;Заглавными буквами следует писать только аббревиатуры. Основной текст — строчными буквами или sentence case. Если всё-таки нужно оставить текст заглавными буквами, используйте параметр &lt;code&gt;android:textAllCaps=”true”&lt;&#x2F;code&gt; — и тогда всё будет ок.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;razmery-elementov&quot;&gt;Размеры элементов&lt;&#x2F;h3&gt;
&lt;p&gt;Любые &lt;em&gt;кликабельные&lt;&#x2F;em&gt; элементы на экране должны иметь размер как минимум 48x48dp. Такой размер &lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;accessibility&#x2F;android&#x2F;answer&#x2F;7101858?hl=en&quot;&gt;рекомендован Google&lt;&#x2F;a&gt;: область нажатия пальцем на экран равняется приблизительно этому значению. В вебе, например, &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;WAI&#x2F;WCAG21&#x2F;Understanding&#x2F;target-size.html&quot;&gt;рекомендованный размер 44x44px&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;content-description&quot;&gt;Content Description&lt;&#x2F;h3&gt;
&lt;p&gt;Не будем лукавить: все мы когда-то устанавливали поле &lt;code&gt;contentDescription&lt;&#x2F;code&gt; в &lt;code&gt;null&lt;&#x2F;code&gt;, потому что «да зачем оно мне надо». Но если вы хотите, чтобы приложение было доступным, придётся разбираться, что это за поле за такое.&lt;&#x2F;p&gt;
&lt;p&gt;Поле &lt;code&gt;contentDescription&lt;&#x2F;code&gt; используется в основном для визуальных компонентов без текста — ImageButton, ImageView и так далее. Это нужно, чтобы TalkBack при наведении на этот элемент не зачитал &lt;em&gt;«Unlabeled, Button, double-tap to activate»&lt;&#x2F;em&gt;, а дал конкретную информацию: что за элемент, зачем он нужен на экране и что произойдет, если нажать на него. Эта строка обязательно должна быть локализована: если пользователь из Франции запустит TalkBack, а ему на чистом японском зачитают «дескрипшен», вряд ли кому-то от этого станет легче. И вообще: любые строки, связанные с a11y, будь то &lt;code&gt;contentDescription&lt;&#x2F;code&gt; или дополнительные действия TalkBack, о которых мы поговорим далее, &lt;strong&gt;должны быть локализованы&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;В этой статье я буду использовать английскую версию TalkBack и локализованные строки так же на английском языке. Не беспокойтесь: на русском TalkBack тоже работает.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Если ImageView имеет на экране чисто декоративную роль, &lt;code&gt;contentDescription&lt;&#x2F;code&gt; можно не указывать. Тогда важно указать другой параметр — &lt;code&gt;importantForAccessibility&lt;&#x2F;code&gt;. Он отвечает за необходимость прочтения TalkBack содержимого этого компонента. У этого параметра есть значения:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yes&lt;&#x2F;code&gt; — компонент обязателен для прочтения TalkBack.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;no&lt;&#x2F;code&gt; — компонент пропускается.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;noHideDescendants&lt;&#x2F;code&gt; — компонент и его дочерние компоненты пропускаются.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;&#x2F;code&gt; — система сама определяет, обязателен ли компонент для TalkBack. Это значение по умолчанию.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;live-regions&quot;&gt;Live Regions&lt;&#x2F;h3&gt;
&lt;p&gt;Иногда нужно при действии с одним компонентом на экране обновить значение компонента, не находящегося в фокусе. Для этого у View в Android есть поле &lt;code&gt;accessibilityLiveRegion&lt;&#x2F;code&gt;, которое позволяет зачитать значение из вью, если оно было изменено. У &lt;code&gt;accessibilityLiveRegion&lt;&#x2F;code&gt; есть три возможных значения:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;none&lt;&#x2F;code&gt; — ничего не обновлять, значение по умолчанию.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;polite&lt;&#x2F;code&gt; — если значение обновилось, но TalkBack ещё воспроизводит старое значение, новое значение зачитается после того, как TalkBack закончит говорить.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assertive&lt;&#x2F;code&gt; — противоположное значению &lt;code&gt;polite&lt;&#x2F;code&gt;. При обновлении значения TalkBack перестанет зачитывать старое значение и сразу начнёт зачитывать новое.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Проще понять на примере: у нас есть кнопка Increment, которая увеличивает значение на 1 и отображает новое значение в TextView. Изменяем значение &lt;code&gt;accessibilityLiveRegion&lt;&#x2F;code&gt; у TextView на &lt;code&gt;polite&lt;&#x2F;code&gt; и вот какой будет результат.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;live_region.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;poriadok-navigatsii-mezhdu-view&quot;&gt;Порядок навигации между View&lt;&#x2F;h3&gt;
&lt;p&gt;В идеале порядок должен идти слева направо, сверху вниз, но иногда этот порядок приходится менять для более удобной навигации между компонентами. На картинке ниже — как раз такой пример. Он надуманный, это можно сделать гораздо лучше: объединить заголовок и значение или использовать параметр &lt;code&gt;labelFor&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;traversal_wrong.4d20bb7f575bb31b.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На этом примере хотелось бы, чтобы после чтения заголовка читалось значение, для которого предназначен этот заголовок. Чтобы изменять порядок навигации, у всех View есть поле &lt;code&gt;accessibilityTraversalBefore&lt;&#x2F;code&gt;. В него нужно передать идентификатор компонента, на который мы хотим переключаться после фокуса текущей выделенной вью.&lt;&#x2F;p&gt;
&lt;p&gt;Также у View есть противоположный параметр — &lt;code&gt;accessibilityTraversalAfter&lt;&#x2F;code&gt;. В нём лежит идентификатор компонента, после которого текущий компонент будет выделен TalkBack. Иногда случается, что нужно задать параметр динамически через код: для этого у объекта класса &lt;code&gt;AccessibilityNodeInfo&lt;&#x2F;code&gt; вызвать метод &lt;code&gt;setTraversalBefore&lt;&#x2F;code&gt; или &lt;code&gt;setTraversalAfter&lt;&#x2F;code&gt;. Подробнее про &lt;code&gt;AccessibilityNodeInfo&lt;&#x2F;code&gt; и &lt;code&gt;AccessibilityDelegate&lt;&#x2F;code&gt; расписано далее.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте укажем к каждому TextView с заголовком параметр &lt;code&gt;android:accessibilityTraversalBefore=&amp;quot;@id&#x2F;value_textview&amp;quot;&lt;&#x2F;code&gt;, где &lt;code&gt;@id&#x2F;value_textview&lt;&#x2F;code&gt; — идентификатор соответствующего заголовка TextView со значением. Получим следующий порядок навигации:&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;traversal_right.2caa1edbfd43ce95.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;kastomnye-v-iu&quot;&gt;Кастомные вью&lt;&#x2F;h3&gt;
&lt;p&gt;Обычно кастомные вью состоят из нескольких более простых компонентов: текстов, кнопок, свитчеров. Хорошая практика — делать так, чтобы компонент выделялся TalkBack как единый, а не выделял отдельно компоненты-составные, и предлагал какие-то действия что можно сделать с этим сложным компонентом.&lt;&#x2F;p&gt;
&lt;p&gt;Понятнее будет, если разобраться на примерах. Предположим, есть компонент деталей криптокошелька. Возможные составляющие: название, баланс, адрес, кнопки пополнить и перевести.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;wallet_card.ffceae845c76d56f.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Кастомная вью, которую мы будем делать доступной&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;com.google.android.material.card.MaterialCardView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:android&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:app&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:tools&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?attr&#x2F;materialCardViewElevatedStyle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;match_parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;16dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:clickable&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:focusable&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:cardCornerRadius&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;16dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;androidx.constraintlayout.widget.ConstraintLayout
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;match_parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:padding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;16dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextView
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;title_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;TextAppearance.Material3.BodyLarge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toStartOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toTopOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tools:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Main wallet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextView
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;balance_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;TextAppearance.Material3.HeadlineLarge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:textStyle&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toStartOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toBottomOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;title_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tools:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ETH 51.7075000194&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextView
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;address_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;TextAppearance.Material3.BodySmall&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:ellipsize&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;middle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:maxEms&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:maxLines&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toStartOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toBottomOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;balance_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tools:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ImageButton
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;qr_code_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?attr&#x2F;selectableItemBackgroundBorderless&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:padding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;ic_qr_code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintBottom_toBottomOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;address_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toEndOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;address_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toTopOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;address_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;deposit_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;Widget.Material3.Button.TonalButton.Icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_marginStart&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;wallet_card_deposit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:icon&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;ic_arrow_downward&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintBaseline_toBaselineOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;transfer_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toEndOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;transfer_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;transfer_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;Widget.Material3.Button.TonalButton.Icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_marginTop&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;48dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;wallet_card_transfer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:icon&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;ic_arrow_upward&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintBottom_toBottomOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toStartOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toBottomOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&#x2F;balance_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;androidx.constraintlayout.widget.ConstraintLayout&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;com.google.android.material.card.MaterialCardView&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;По умолчанию, если ничего не делать, TalkBack просто зачитает текстовое содержимое компонента: название кошелька, баланс и адрес.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;wallet_card_talkback.2c985eb8f79a8882.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Что зачитывает TalkBack&lt;&#x2F;p&gt;
&lt;p&gt;Как можно улучшить UX для незрячих? Сделаем компонент более доступным за несколько простых шагов.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Все дочерние элементы пометить &lt;code&gt;importantForAccessibility = no&lt;&#x2F;code&gt;, чтобы TalkBack не читал ничего, кроме кнопок «пополнить» и «перевести». С ними разберёмся позже.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextView
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;title_tv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@style&#x2F;TextAppearance.Material3.BodyLarge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:importantForAccessibility&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintStart_toStartOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;app:layout_constraintTop_toTopOf&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tools:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Main wallet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Даём корневому элементу понятный &lt;code&gt;contentDescription&lt;&#x2F;code&gt;. Нужно определить, какая информация полезна для прочтения TalkBack. Пользователю будет полезно знать название кошелька и баланс. Обновлять &lt;code&gt;contentDescription&lt;&#x2F;code&gt; будем в функции &lt;code&gt;setData&lt;&#x2F;code&gt;, которая вызывается при инициализации компонента.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setData&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    balance: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    address: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;) = with(binding) {
&lt;&#x2F;span&gt;&lt;span&gt;	titleTv.text = title
&lt;&#x2F;span&gt;&lt;span&gt;    balanceTv.text = balance
&lt;&#x2F;span&gt;&lt;span&gt;    addressTv.text = address
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Строка со значением &amp;quot;Wallet card: %s, balance is %s&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	root.contentDescription = context.getString(
&lt;&#x2F;span&gt;&lt;span&gt;        R.string.wallet_card_accessibility_description,
&lt;&#x2F;span&gt;&lt;span&gt;        title,
&lt;&#x2F;span&gt;&lt;span&gt;        balance
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Обрабатываем взаимодействие с компонентом. Какой смысл этого компонента? Что он делает? Выделим список возможных действий:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;По нажатию на карточку переходим на экран деталей по кошельку.&lt;&#x2F;li&gt;
&lt;li&gt;По нажатию на кнопку «Перевести» или «Пополнить» переходим на экран переводов. &lt;em&gt;С кнопками делать ничего не нужно, мы их не помечали как игнорируемые и они по умолчанию поддерживают accessibility.&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Возможность скопировать адрес кошелька.&lt;&#x2F;li&gt;
&lt;li&gt;Возможность отобразить адрес в формате QR-кода.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Для перехода к деталям кошелька почти ничего не требуется, если уже назначен слушатель на событие нажатия на карточку. Единственное, что стоит переопределить, — название действия. По умолчанию при нажатии на кликабельный элемент TalkBack будет зачитывать &lt;em&gt;«Double tap to activate»&lt;&#x2F;em&gt; Это понятно, если элемент — кнопка или свитчер. Но если компонент сложный, &lt;em&gt;«activate»&lt;&#x2F;em&gt; не передаёт нужного контекста. Вот бы было можно заменить описание действия, дав больше контекста. И — сюрприз — так можно!&lt;&#x2F;p&gt;
&lt;p&gt;Каждая вью содержит сущность &lt;code&gt;AccessibilityDelegate&lt;&#x2F;code&gt;. Согласно &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;reference&#x2F;android&#x2F;view&#x2F;View.AccessibilityDelegate&quot;&gt;документации&lt;&#x2F;a&gt;, делегат позволяет делать компоненты доступными не с помощью наследования, а с помощью композиции. Он может перехватывать события с UI, создавать кастомные экшны, редактировать существующие — и ещё много вещей, которые прокачают доступность компонентов.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте создадим делегата для нашей карточки. Будем использовать класс &lt;code&gt;ViewCompat&lt;&#x2F;code&gt; для обратной совместимости. Всё это опишем в методе &lt;code&gt;setupAccessibility&lt;&#x2F;code&gt;, который также вызываем при инициализации компонента.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;ViewCompat.setAccessibilityDelegate(
&lt;&#x2F;span&gt;&lt;span&gt;    binding.root,
&lt;&#x2F;span&gt;&lt;span&gt;    object : AccessibilityDelegateCompat() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onInitializeAccessibilityNodeInfo&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            host: View,
&lt;&#x2F;span&gt;&lt;span&gt;            info: AccessibilityNodeInfoCompat
&lt;&#x2F;span&gt;&lt;span&gt;        ) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;.onInitializeAccessibilityNodeInfo(host, info)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;customAction = AccessibilityNodeInfoCompat.AccessibilityActionCompat(
&lt;&#x2F;span&gt;&lt;span&gt;                AccessibilityNodeInfoCompat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ACTION_CLICK&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Строка со значением &amp;quot;View wallet details&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;				context.getString(R.string.wallet_card_accessibility_card_click_action)
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;            info.addAction(customAction)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Вы великолепны. Теперь TalkBack при наведении на карточку зачитает действие как &lt;em&gt;«Double tap to view wallet details»&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Разберёмся с функциональностью, связанной с адресом. Для компонента помимо основных действий — нажатия,  долгого нажатия и так далее — можно добавлять кастомные действия и вызывать их через меню TalkBack. Чтобы открыть меню, нужно при включенном TalkBack сделать L-образный свайп сверху вниз или свайп тремя пальцами вниз — если версия TalkBack выше 9.1. Для добавления кастомного действия используются:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Функция &lt;code&gt;ViewCompat.addAccessibilityAction&lt;&#x2F;code&gt;, куда передаём корневую вью и название действия.&lt;&#x2F;li&gt;
&lt;li&gt;Класс &lt;code&gt;AccessibilityViewCommand&lt;&#x2F;code&gt;, в которое кладём код с действием, — просто лямбда.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setupAccessibility&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    . . .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ViewCompat.addAccessibilityAction(
&lt;&#x2F;span&gt;&lt;span&gt;        binding.root,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Строка &amp;quot;Show address QR code&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        context.getString(R.string.wallet_card_accessibility_show_qr_code_action)
&lt;&#x2F;span&gt;&lt;span&gt;    ) { _, _ -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Открываем диалог с QR здесь
&lt;&#x2F;span&gt;&lt;span&gt;        Toast.makeText(context, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QR code has shown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Toast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LENGTH_SHORT&lt;&#x2F;span&gt;&lt;span&gt;).show()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;По такой же логике добавляем второе действие — копирование адреса кошелька.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setupAccessibility&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    . . .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ViewCompat.addAccessibilityAction(
&lt;&#x2F;span&gt;&lt;span&gt;        binding.root,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Строка &amp;quot;Copy the wallet address&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        context.getString(R.string.wallet_card_accessibility_copy_the_address_action)
&lt;&#x2F;span&gt;&lt;span&gt;    ) { _, _ -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Кладём строку с адресом в буфер обмена
&lt;&#x2F;span&gt;&lt;span&gt;        Toast.makeText(context, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Address has copied&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Toast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LENGTH_SHORT&lt;&#x2F;span&gt;&lt;span&gt;).show()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Кастомная вью теперь гораздо доступнее, чем была до этого. Вот так это будет выглядеть со стороны пользователя.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;wallet_accessible.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Можно и дальше придумывать, как сделать этот компонент более доступным. Я разобрал базовые случаи и инструменты для работы с Accessibility. Например, ещё придумал, что можно добавить кастомный экшн на чтение адреса полностью или первых и последних пяти символов.&lt;&#x2F;p&gt;
&lt;p&gt;Если получается много однотипного кода, можно вынести повторяющиеся вещи в функции-расширения. Кастомные действия также подходят для более сложных случаев взаимодействия с UI: перетаскивание элементов в списке, swipe-to-delete и прочие.&lt;&#x2F;p&gt;
&lt;p&gt;Возьмём другой пример. Пойдём дальше по тематике приложения с криптовалютами. У нас есть такой вот глупенький кастомный свитч, у которого есть 2 состояния: пополнить или перевести. Внутри это просто &lt;code&gt;LinearLayout&lt;&#x2F;code&gt; с двумя кнопками.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;operation_switch.ae75633820beb561.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Кастомный свитч&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinearLayout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:android&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;match_parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;16dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_background&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:orientation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;horizontal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;deposit_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_weight&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_item_selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;operation_switch_deposit_label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:textColor&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?colorPrimary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;transfer_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_weight&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_item_selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;operation_switch_transfer_label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:textColor&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?colorPrimary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinearLayout&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;По смыслу это один компонент, но если ничего не делать, TalkBack будет читать эти две кнопки как отдельные компоненты. Чтобы сделать свитчер более доступным, нужно следующее:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Дать осмысленное название свитчу с помощью параметра &lt;code&gt;contentDescription&lt;&#x2F;code&gt;. В этот раз мы можем сделать это прямо в XML, потому что контент вью неизменный, в отличие от прошлой вью — там у нас на входе были название кошелька и баланс.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinearLayout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:android&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;match_parent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;16dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_background&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:contentDescription&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;operation_switch_accessibility_description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:orientation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;horizontal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- В contentDescription строка &amp;quot;Operation type&amp;quot; --&amp;gt;		
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    . . .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinearLayout&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Все кнопки пометить &lt;code&gt;importantForAccessibility = no&lt;&#x2F;code&gt;, чтобы TalkBack не выделял их.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;deposit_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_weight&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_item_selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:importantForAccessibility&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;operation_switch_deposit_label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:textColor&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?colorPrimary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Button
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@+id&#x2F;transfer_button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_height&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrap_content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_margin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8dp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:layout_weight&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:background&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@drawable&#x2F;switch_item_selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:importantForAccessibility&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:text&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@string&#x2F;operation_switch_transfer_label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;android:textColor&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?colorPrimary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;У этого компонента два состояния: пополнить или перевести. По смыслу эта кастомная вью — свитчер, но TalkBack про это ничего не знает. Чтобы добавить состояние для компонента, есть поле stateDescription. А зачем оно нужно? Мы же просто можем класть состояние в &lt;code&gt;contentDescription&lt;&#x2F;code&gt; и эффект будет тот же.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;well_yes.6f28c936b66cbfc1.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size: 14px; padding-bottom: 1.5em&quot;&gt;Всё опять не так просто, как хотелось бы&lt;&#x2F;p&gt;
&lt;p&gt;Каждый раз, когда мы обновляем состояние компонента и, следовательно, обновляем &lt;code&gt;contentDescription&lt;&#x2F;code&gt;, TalkBack будет его зачитывать. &lt;&#x2F;p&gt;
&lt;p&gt;В &lt;code&gt;contentDescription&lt;&#x2F;code&gt; , помимо состояния, есть ещё описание самого компонента. Чтобы его не повторять, а воспроизводить только изменённое состояние, это состояние выделили в отдельное поле. Хорошая практика: в &lt;code&gt;contentDescription&lt;&#x2F;code&gt; класть только описание компонента — «Operation type». Состояние класть в &lt;code&gt;stateDescription&lt;&#x2F;code&gt; — «Deposit» или «Transfer». Давайте обновлять у нашего свитчера состояние при изменении:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;depositButton.setOnClickListener {
&lt;&#x2F;span&gt;&lt;span&gt;    depositButton.select()
&lt;&#x2F;span&gt;&lt;span&gt;    transferButton.deselect()
&lt;&#x2F;span&gt;&lt;span&gt;    updateStateDescription()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;transferButton.setOnClickListener {
&lt;&#x2F;span&gt;&lt;span&gt;    transferButton.select()
&lt;&#x2F;span&gt;&lt;span&gt;    depositButton.deselect()
&lt;&#x2F;span&gt;&lt;span&gt;    updateStateDescription()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;updateStateDescription&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    ViewCompat.setStateDescription(
&lt;&#x2F;span&gt;&lt;span&gt;        binding.root,
&lt;&#x2F;span&gt;&lt;span&gt;		context.getString(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (binding.transferButton.isSelected) {
&lt;&#x2F;span&gt;&lt;span&gt;                R.string.operation_switch_transfer_label
&lt;&#x2F;span&gt;&lt;span&gt;			} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                R.string.operation_switch_deposit_label
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Помимо состояния, вью обозначает, что за компонент и какую роль он играет на экране: кнопки, переключателя, чекбокса, меню-бара и так далее.  Можно просто закинуть эту роль в &lt;code&gt;contentDescription&lt;&#x2F;code&gt; — но, конечно, это плохая практика.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;




&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;we_dont_do_that_here.d414589c9655f613.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Есть два способа обозначить роли: указать &lt;code&gt;className&lt;&#x2F;code&gt; или использовать поле &lt;code&gt;roleDescription&lt;&#x2F;code&gt;. В чём их отличие? Поле &lt;code&gt;className&lt;&#x2F;code&gt; следует перегружать, если кастомный компонент имеет роль стандартного компонента: &lt;code&gt;Button&lt;&#x2F;code&gt;, &lt;code&gt;Checkbox&lt;&#x2F;code&gt;, &lt;code&gt;RadioButton&lt;&#x2F;code&gt; — просто его вёрстка и реализация отличаются.&lt;&#x2F;p&gt;
&lt;p&gt;Если компонент уникальный и у него нет аналогов в библиотеке стандартных компонентов, можно явно указать его название его название с помощью параметра &lt;code&gt;roleDescription&lt;&#x2F;code&gt;. Такими компонентами могут быть рекламные баннеры или кастомные меню-панели. В нашем случае мы создаём аналог &lt;code&gt;Switch&lt;&#x2F;code&gt;, поэтому будем использовать установку роли через &lt;code&gt;className&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;ViewCompat.setAccessibilityDelegate(
&lt;&#x2F;span&gt;&lt;span&gt;	root,
&lt;&#x2F;span&gt;&lt;span&gt;    object : AccessibilityDelegateCompat() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onInitializeAccessibilityNodeInfo&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            host: View,
&lt;&#x2F;span&gt;&lt;span&gt;            info: AccessibilityNodeInfoCompat
&lt;&#x2F;span&gt;&lt;span&gt;        ) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;.onInitializeAccessibilityNodeInfo(host, info)
&lt;&#x2F;span&gt;&lt;span&gt;            info.className = Switch::class.java.name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Если вам нужно указать отличную от стандартной роль
&lt;&#x2F;span&gt;&lt;span&gt;            info.roleDescription = context.getString(R.string.role_description_switch)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Мы хотим, чтобы при двойном нажатии на вью при включенном TalkBack свитчер менял своё значение. Этого мы можем добиться с помощью функции &lt;code&gt;ViewCompat.replaceAccessibilityAction&lt;&#x2F;code&gt;. Она переопределяет поведение переданного в функцию экшна, в нашем случае &lt;code&gt;ACTION_CLICK&lt;&#x2F;code&gt; на поведение, переданное в лямбде.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span&gt;ViewCompat.replaceAccessibilityAction(
&lt;&#x2F;span&gt;&lt;span&gt;	root,
&lt;&#x2F;span&gt;&lt;span&gt;    AccessibilityNodeInfoCompat.AccessibilityActionCompat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ACTION_CLICK&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Строка &amp;quot;Toggle&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	context.getString(R.string.operation_switch_accessibility_toggle_action)
&lt;&#x2F;span&gt;&lt;span&gt;) { _, _ -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (transferButton.isSelected) {
&lt;&#x2F;span&gt;&lt;span&gt;        depositButton.performClick()
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        transferButton.performClick()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Всё! Что у нас получилось в итоге, можно посмотреть на видео ниже. Все примеры кода лежат &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weazyexe&#x2F;a11yforviews&quot;&gt;у меня на GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;switch_accessible.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;accessibility-proshche-chem-kazhetsia&quot;&gt;Accessibility проще, чем кажется&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Всё не так сложно, как казалось на первый взгляд. Не нужно создавать отдельную версию приложения для людей с ограниченными возможностями.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Стоит чаще запускать Accessibility Scanner и исправлять ошибки. Не забываем про указание заголовков для удобной навигации, не кладём null в &lt;code&gt;contentDescription&lt;&#x2F;code&gt;, следим за порядком навигации между компонентами и делаем кастомные вью доступными!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Все строки, связанные с a11y, следует выносить в &lt;code&gt;strings.xml&lt;&#x2F;code&gt; и делать для них локализацию для языков, которые поддерживаются приложением.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Все стандартные компоненты Android SDK по умолчанию поддерживают a11y.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Во время тестирования приложения попробуйте попользоваться им, не подглядывая на экран, — только через TalkBack. Может быть, вы найдете моменты, которые можно было бы сделать лучше. 🙂&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В поддержке Accessibility одни плюсы: люди с ограниченными возможностями смогут пользоваться приложениями без неудобств, в то же время в большинстве случаев у разработчиков поддержка не занимает много времени и ресурсов. Правда, порой встречаются очень необычные кейсы, где поддержать a11y — это вызов для всей команды разработки. Примерами могут послужить сложные кастомные вью, нарисованные на Canvas, большие таблицы с огромным количеством данных или графики.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Текст изначально публиковался на &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;company&#x2F;surfstudio&#x2F;blog&#x2F;678294&#x2F;&quot;&gt;habr.ru&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="ru">
        <title>Material You: раскладываем по полочкам обновление дизайн-системы Material</title>
        <published>2022-02-25T10:16:00+04:00</published>
        <updated>2022-02-25T10:16:00+04:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://weazyexe.dev/material-you/" type="text/html"/>
        <id>https://weazyexe.dev/material-you/</id>
        
        <content type="html">
&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;cover.11326ddb55f1c79a.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;istoriia-material&quot;&gt;История Material&lt;&#x2F;h2&gt;
&lt;p&gt;В 2014 году вместе с релизом Android 5.0 Lollipop Google представил миру концепцию Material Design. Каждый элемент в системе состоит из «материала», идею которого хорошо описал дизайнер Матиас Дуарте: «В отличие от настоящей бумаги цифровой материал может разумно расширяться и преобразовываться. Материал имеет физические поверхности и края. Швы и тени придают смысл тому, к чему можно прикоснуться».&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: space-around;&quot;&gt;
    &lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;material_1_behavior.webm&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
    &lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted width=&quot;300&quot;&gt;
        &lt;source src=assets&amp;#x2F;material_1_shapes.webm&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p align=&quot;center&quot;&gt;Материал в Material&lt;&#x2F;p&gt;
&lt;p&gt;В 2018 году увидела свет вторая версия Material. В ней сделали больше возможностей для кастомизации:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;обновили цветовую схему, &lt;&#x2F;li&gt;
&lt;li&gt;обновили гайдлайны по работе со шрифтами, &lt;&#x2F;li&gt;
&lt;li&gt;добавили поддержку форм (не форм ввода данных, а shapes у компонентов). &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Появилось больше способов выразить через стандартные компоненты Material айдентику — внешний визуальный интферфейс бренда.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted style=&quot;width: 100%&quot;&gt;
        &lt;source src=assets&amp;#x2F;material_2.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Но Google и на этом не остановился: именно поэтому сейчас вы читаете эту статью. В 2021 году на Google I&#x2F;O представили концепцию Material You — новую версию Material под номером 3. По сравнению с прошлым обновлением изменений действительно много. Цель новой концепции — персонализировать пользовательский опыт. В этой статье обсудим:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;обновление цветовой палитры Material,&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic Color,&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;обновление UI-компонентов.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Но сначала — вводная часть: разберём базовое устройство цветовой палитры Material. Это поможет лучше понять обновления в Material 3: что они означают и как с ними работать.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Дисклеймер: эта статья — больше про дизайн, чем про разработку и использование компонентов в коде.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;baza-tsvetovoi-skhemy-material&quot;&gt;База цветовой схемы Material&lt;&#x2F;h2&gt;
&lt;p&gt;Material-палитра состоит из шести ключевых цветов:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Primary&lt;&#x2F;li&gt;
&lt;li&gt;Secondary&lt;&#x2F;li&gt;
&lt;li&gt;Background&lt;&#x2F;li&gt;
&lt;li&gt;Surface&lt;&#x2F;li&gt;
&lt;li&gt;Error&lt;&#x2F;li&gt;
&lt;li&gt;Outline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Primary&lt;&#x2F;em&gt; и &lt;em&gt;Secondary&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — первичный и вторичный цвета, основные акцентные цвета приложения, цвета бренда. Здесь всё очевидно. Например, у YouTube &lt;em&gt;Primary&lt;&#x2F;em&gt; цвет — #ff0000 (красный), у Twitter — #1d9bf0 (синий). &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Background&lt;&#x2F;em&gt; и &lt;em&gt;Surface&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — цвета поверхностей, на которых располагается контент. &lt;em&gt;Background&lt;&#x2F;em&gt;-цвет — цвет фона приложения, а &lt;em&gt;Surface&lt;&#x2F;em&gt; — цвет поверхностей компонентов в приложении. Самый яркий пример — карточки (Card View). У Card View стандартный цвет фона — &lt;em&gt;Surface&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Кажется, что между &lt;em&gt;Background&lt;&#x2F;em&gt; и &lt;em&gt;Surface&lt;&#x2F;em&gt; нет никаких отличий. Но это не так: в светлой теме они не заметны, но в тёмной хорошо видны&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;themes_comparing.1f730ff60e1d9ef4.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Давайте вспомним базу Material. Как располагаются компоненты в приложении относительно друг друга? В &lt;a href=&quot;https:&#x2F;&#x2F;material.io&#x2F;design&#x2F;environment&#x2F;elevation.html&quot;&gt;гайдлайнах Material&lt;&#x2F;a&gt; это описано подробно, но мы пробежимся очень кратко.&lt;&#x2F;p&gt;
&lt;p&gt;Компоненты в приложении находятся на разных высотах относительно оси Z. В светлой теме высота показывается с помощью тени под компонентом. В тёмной теме это не сработает: тени не будет видно. Решение простое и элегантное: чем выше контент по оси Z, тем ближе он будет к источнику света (поверхности экрана) и тем светлее будет компонент.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted style=&quot;width: 100%&quot;&gt;
        &lt;source src=assets&amp;#x2F;elevation.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут-то и приходит на помощь &lt;em&gt;Surface&lt;&#x2F;em&gt;-цвет! Если задать цвет &lt;em&gt;Surface&lt;&#x2F;em&gt;, при изменении &lt;code&gt;elevation&lt;&#x2F;code&gt; цвет контента будет меняться автоматически без лишних строк кода. Маппинг значений &lt;code&gt;elevation&lt;&#x2F;code&gt; в значение яркости поверхности хорошо описан в документации и хорошо отображен на визуализации ниже.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; padding-bottom: 1.5em&quot;&gt;
    &lt;video autoplay loop muted style=&quot;width: 100%&quot;&gt;
        &lt;source src=assets&amp;#x2F;elevation_surface.mp4&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Цвет &lt;em&gt;Error&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — цвет для отображения ошибок. В объяснении, думаю, не нуждается.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Outline&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — цвет для обводки различных компонентов. Самый яркий пример — Outlined Text Field.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;outlined_text_field.7d47776f434e16b4.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;С ключевыми цветами покончили. Остаются только их вариации — &lt;em&gt;on-цвета&lt;&#x2F;em&gt;. &lt;strong&gt;&lt;em&gt;On-цвета&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — цвета, которые будут &lt;em&gt;идеально&lt;&#x2F;em&gt; смотреться на «поверхности», окрашенной в основной или второстепенный цвета, цвета поверхности, фона или ошибки.&lt;&#x2F;p&gt;
&lt;p&gt;Сразу привожу пример: у красного Error-цвета OnError-цвет логично будет белым, потому что он хорошо читается на красном фоне. У каждого цвета, кроме Outline, есть соответствующий ему on-цвет: у Primary есть OnPrimary, у Surface есть OnSurface и так далее.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;on_error.0a0de167aceca9d5.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;baza-tsvetovoi-skhemy-material-1&quot;&gt;База цветовой схемы Material&lt;&#x2F;h2&gt;
&lt;p&gt;Базу цветовой схемы Material разобрали. Перейдём к нововведениям.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;В палитру добавили &lt;em&gt;Tertiary&lt;&#x2F;em&gt;-цвет и все его вариации.&lt;&#x2F;strong&gt; &lt;em&gt;Tertiary&lt;&#x2F;em&gt; — третий цвет для айдентики бренда наряду с &lt;em&gt;Primary&lt;&#x2F;em&gt; и &lt;em&gt;Secondary&lt;&#x2F;em&gt;: иногда двумя цветами бренду ограничиться непросто.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Появился новый &lt;em&gt;Surface&lt;&#x2F;em&gt;-цвет — &lt;em&gt;SurfaceVariant&lt;&#x2F;em&gt; (вместе с &lt;em&gt;OnSurfaceVariant&lt;&#x2F;em&gt;).&lt;&#x2F;strong&gt; Это второй вариант для цветов поверхностей. Можно использовать, например, в качестве цвета текста на поверхностях или цвета дивайдеров.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ещё одна новинка палитры Material — &lt;em&gt;Container&lt;&#x2F;em&gt;-цвета.&lt;&#x2F;strong&gt; &lt;em&gt;Container&lt;&#x2F;em&gt;-цвета — новая вариация цветов, которая используется в контейнерах с компонентами. Яркий пример — Floating Action Button. Начиная с Material 3, цвет фона у этой кнопки стал &lt;em&gt;PrimaryContainer&lt;&#x2F;em&gt;, а цвет контента на этой кнопке — &lt;em&gt;OnPrimaryContainer&lt;&#x2F;em&gt;. У &lt;em&gt;Container&lt;&#x2F;em&gt; вариаций также есть злой двойник — &lt;em&gt;On&lt;&#x2F;em&gt;-цвет. &lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;container_colors.fe252c2b6483ad36.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;dynamic-color&quot;&gt;Dynamic Color&lt;&#x2F;h2&gt;
&lt;p&gt;Как Google собирается делать девайсы более персональными с Material You? С помощью &lt;strong&gt;Dynamic Color&lt;&#x2F;strong&gt; — одного из главных нововведений Material 3!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Color (динамический цвет)&lt;&#x2F;strong&gt; — фича, которая генерирует цветовую палитру по обоям пользователя и распространяет её на все приложения в системе (которые, естественно, поддерживают Dynamic Color).&lt;&#x2F;p&gt;
&lt;p&gt;Как генерируется цвет? Цветовую палитру создаёт встроенный в Android 12 Monet Engine: он извлекает из обоев так называемый seed color и по нему генерирует палитру. &lt;&#x2F;p&gt;
&lt;p&gt;Тональная палитра состоит из тринадцати тонов, включая белый и черный. Значение тона 100 эквивалентно представлению о максимальном освещении и даёт белый цвет. Значение тона 0 — чистый чёрный цвет. Каждое значение тона от 0 до 100 выражает количество света, присутствующего в цвете.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;colors_by_seed.6210778bd1de55df.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В Android генерируется пять ключевых цветов:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Accent1&lt;&#x2F;em&gt; (используется для &lt;em&gt;Primary&lt;&#x2F;em&gt;), &lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Accent2&lt;&#x2F;em&gt; (для &lt;em&gt;Secondary&lt;&#x2F;em&gt;), &lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Accent3&lt;&#x2F;em&gt; (для &lt;em&gt;Tertiary&lt;&#x2F;em&gt;), &lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Neutral1&lt;&#x2F;em&gt; (для &lt;em&gt;Background&lt;&#x2F;em&gt; и &lt;em&gt;Surface&lt;&#x2F;em&gt;), &lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Neutral2&lt;&#x2F;em&gt; (для &lt;em&gt;SurfaceVariant&lt;&#x2F;em&gt; и &lt;em&gt;Outline&lt;&#x2F;em&gt;). &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Плюс 13 их вариантов с разной тональностью. Сгенерированную палитру можно посмотреть с помощью виджета-пасхалки в Android 12.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;generated_palettes.16d635519f33d9d3.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Теперь сопоставим все данные вместе: у нас есть большая сгенерированная палитра цветов и система цветов Material. На картинке ниже — готовая цветовая схема приложения, сгенерированная лишь по одному seed color.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;palette.93a68cc0c670d021.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Сгенерировать свою палитру по канонам Material 3 можно с помощью &lt;a href=&quot;https:&#x2F;&#x2F;material-foundation.github.io&#x2F;material-theme-builder&#x2F;&quot;&gt;Material Theme Builder&lt;&#x2F;a&gt;. Также оттуда можно выгружать темы в виде стилей XML и стилей Jetpack Compose.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;dark_light_palettes.f2712a69fe71eccc.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;obnovlenie-ui-komponentov&quot;&gt;Обновление UI компонентов&lt;&#x2F;h2&gt;
&lt;p&gt;В Material 3 обновили гайдлайны по UI-компонентам: кнопкам, чипам, диалогам, карточкам и панели навигации. Сolor mapping у всех компонентов соответствует гайдлайнам Material 3 и поддерживает Dynamic Color. Поговорим подробнее про каждый из компонентов.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;knopki&quot;&gt;Кнопки&lt;&#x2F;h3&gt;
&lt;p&gt;Обновили всё: обычные кнопки, FAB (floating action button) и Extended FAB.&lt;&#x2F;p&gt;
&lt;p&gt;Новое в обычных кнопках:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Полностью закруглили углы.&lt;&#x2F;li&gt;
&lt;li&gt;Поменяли размеры кнопок: стандартную высоту подняли с 36dp до 40dp, размер иконки в кнопке увеличили до 18dp.&lt;&#x2F;li&gt;
&lt;li&gt;Текст в кнопках теперь пишется не капсом, а с большой буквы (sentence case).&lt;&#x2F;li&gt;
&lt;li&gt;Добавили 3 типа кнопок: filled — с бэкграундом primary, secondary, tertiary или какого угодно цвета, filled tonal — с бэкграундом container цвета) и elevated кнопки — с тенью.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Вот они слева направо: &lt;em&gt;Filled&lt;&#x2F;em&gt;, &lt;em&gt;Filled Tonal&lt;&#x2F;em&gt;, &lt;em&gt;Elevated&lt;&#x2F;em&gt;, &lt;em&gt;Outlined&lt;&#x2F;em&gt;, &lt;em&gt;Text&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;buttons.d44e4c02eb0c68b2.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Новое в FAB:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Изменили форму: теперь FAB — квадратные с закругленными углами, а не круглые.&lt;&#x2F;li&gt;
&lt;li&gt;Добавили новый тип — Large FAB.&lt;&#x2F;li&gt;
&lt;li&gt;Обновили цветовую палитру кнопки: теперь бэкграунд по гайдлайнам должен иметь &lt;em&gt;Container&lt;&#x2F;em&gt;-цвет (&lt;em&gt;Primary&lt;&#x2F;em&gt;, &lt;em&gt;Secondary&lt;&#x2F;em&gt; или &lt;em&gt;Tertiary&lt;&#x2F;em&gt;), а контент на кнопке — соответствующий &lt;em&gt;On-Container&lt;&#x2F;em&gt; цвет.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;fabs.9467a8bc2367a87e.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Новое в Extended FAB:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Изменили форму: Extended FAB теперь тоже стали квадратные с закругленными углами.&lt;&#x2F;li&gt;
&lt;li&gt;Обновили цветовую схему по аналогии с обычными FAB.&lt;&#x2F;li&gt;
&lt;li&gt;Обновили размеры кнопки, если в ней есть текст: теперь по высоте она точно такая же, как и обычный FAB.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;extended_fabs.cf968190bd6fbaff.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;chipy-chips&quot;&gt;Чипы (chips)&lt;&#x2F;h3&gt;
&lt;p&gt;Чипы — компоненты, которые помогают пользователю вводить и фильтровать информацию. Что нового:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Обновили форму компонента. Теперь они все одинаковые: прямоугольные с закруглениями по углам.&lt;&#x2F;li&gt;
&lt;li&gt;Разделили чипы на четыре типа: &lt;em&gt;Assist&lt;&#x2F;em&gt;, &lt;em&gt;Filter&lt;&#x2F;em&gt;, &lt;em&gt;Input&lt;&#x2F;em&gt;, &lt;em&gt;Suggestion&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;chips.933182854f9bb095.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Assist&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — для  «умных» или автоматизированных действий: например, добавить событие в календарь. Ближайший визуальный аналог — обычная кнопка.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;chip_assist.0c35ae616b6867c8.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Filter&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — кнопка для фильтрации данных.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;chip_filter.3abab6342fab060e.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Input&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — данные, которые были введены пользователем. Яркий пример: ввод адреса электронной почты, когда данные из текстового поля преобразуются в данные в чипе.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;chip_input.9991caae53fac920.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Suggestion&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; — чипы помогают сузить намерения пользователя: предлагают динамические предположения о возможных действиях пользователя — например, варианты ответа на сообщение в мессенджере.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;chip_suggestion.f9273dad1892d63b.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;dialogi&quot;&gt;Диалоги&lt;&#x2F;h3&gt;
&lt;p&gt;Обновления в диалогах:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Увеличили паддинг контента.&lt;&#x2F;li&gt;
&lt;li&gt;Увеличили радиус закругления углов.&lt;&#x2F;li&gt;
&lt;li&gt;Обновили шрифты.&lt;&#x2F;li&gt;
&lt;li&gt;В стандартный диалог добавили иконку над заголовком диалога.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;dialogs.9578fac1279b458e.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Также Google выкатил гайдлайны по реализации полноэкранных диалогов. Их можно использовать для ввода данных на экранах мобильных устройств. Правда, на планшетах этот диалог будет не полноэкранным, а обычным.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;dialogs_large_screen.5d1a1359db861891.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;navigatsiia&quot;&gt;Навигация&lt;&#x2F;h3&gt;
&lt;p&gt;В Android всю жизнь было два способа построить user-friendly навигацию: боковой бар и нижний. С Material 3 в Android унифицировали нейминг баров навигации и добавили новый вид — &lt;em&gt;Navigation Rail&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Navigation Bar&lt;&#x2F;em&gt; — переименованный Bottom Navigation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Navigation Drawer&lt;&#x2F;em&gt; — боковая панель навигации. Можно вызвать по свайпу с левой стороны экрана или, если экран большой, закрепить в левой части.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Navigation Rail&lt;&#x2F;em&gt; — тоже боковая панель навигации, но более узкая: как вертикальный &lt;em&gt;Navigation Bar&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Обновлений по барам навигации не так много: обновили цветовую схему, добавили закругления, изменили размеры некоторых компонентов.&lt;&#x2F;p&gt;
&lt;p&gt;Хочу остановиться только на &lt;em&gt;Navigation Rail&lt;&#x2F;em&gt;. По гайдлайнам его советуют использовать для больших экранов вместо &lt;em&gt;Navigation Bar&lt;&#x2F;em&gt;, который неопрятно растягивается на всю ширину внизу экрана.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;navigation_rail.1a4bbfe283d97d9a.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;prochie-obnovleniia&quot;&gt;Прочие обновления&lt;&#x2F;h2&gt;
&lt;p&gt;Изменения коснулись и больших экранов. В преддверии выхода Android 12L Google показал гайдлайны по дизайну приложений, которые адаптированы для разных экранов: мобильного, складного и большого.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;screen_sizes.df1624f333cdabff.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Обновление затронуло много компонентов, о которых нет смысла рассказывать отдельно. А вот карточки сильно перерабатывать не стали. Помимо цветовой схемы, изменений минимум:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;У карточки убрали elevation.&lt;&#x2F;li&gt;
&lt;li&gt;Карточки разделили на 3 типа: &lt;em&gt;Elevated&lt;&#x2F;em&gt; (с тенью), &lt;em&gt;Filled&lt;&#x2F;em&gt; (залитая цветом) и &lt;em&gt;Outlined&lt;&#x2F;em&gt; (с обводкой).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;cards.b1c9deff5c00221b.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Та же ситуация и с тулбарами: немного изменили цветовую схему, позиционирование текста для разных видов тулбара, обновили шрифты, убрали elevation.&lt;&#x2F;p&gt;

&lt;div style=&quot;display: flex; justify-content: center; padding-top: 1em&quot;&gt;
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;weazyexe.dev&amp;#x2F;processed_images&amp;#x2F;toolbars.578656b7b6af1176.webp&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;material-you-luchshee-chto-proiskhodilo-s-material&quot;&gt;Material You — лучшее, что происходило с Material&lt;&#x2F;h2&gt;
&lt;p&gt;Третье обновление концепции Material выдалось весьма объемным и принесло много нового, в частности, в дизайн Android. Тезисно:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Много нового появилось в палитре Material (надеюсь, вам помог мой краткий экскурс в палитру).&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Color — интересная вещь. Мне нравится, что с Android 13 все вендоры обязаны будут поддержать эту фичу. Но есть сомнения, что все сторонние приложения в ближайшее время начнут поддерживать динамические цвета.&lt;&#x2F;li&gt;
&lt;li&gt;Обновили компоненты, API для работы с ними в Material Design Components и обновляют API для работы с ними на других платформах (Jetpack Compose, Flutter, Web).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Состояние Material You на июль 2023 года:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;С момента релиза дизайн системы появилось достаточно много новых компонентов, обновлены некоторые гайдлайны&lt;&#x2F;li&gt;
&lt;li&gt;Стабильные библиотеки с Material You компонентами уже есть для &lt;a href=&quot;https:&#x2F;&#x2F;m3.material.io&#x2F;develop&#x2F;android&#x2F;mdc-android&quot;&gt;Android View&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;m3.material.io&#x2F;develop&#x2F;android&#x2F;jetpack-compose&quot;&gt;Jetpack Compose&lt;&#x2F;a&gt; и &lt;a href=&quot;https:&#x2F;&#x2F;m3.material.io&#x2F;develop&#x2F;flutter&quot;&gt;Flutter&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Поддержка для Web только в планах.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Текст изначально публиковался на &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;companies&#x2F;surfstudio&#x2F;articles&#x2F;653115&#x2F;&quot;&gt;habr.ru&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
</feed>
